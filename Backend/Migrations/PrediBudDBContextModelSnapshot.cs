// <auto-generated />
using System;
using Backend.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(PrediBudDBContext))]
    partial class PrediBudDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Data.Models.Common.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ConstructionSpecifications", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Backend.Data.Models.Notifications.ConstructionOrderNotification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionOrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConstructionOrderID");

                    b.HasIndex("WorkerId");

                    b.ToTable("ConstructionOrderNotifications");
                });

            modelBuilder.Entity("Backend.Data.Models.Notifications.MaterialNotification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("MaterialNotifications");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Construction.ConstructionOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AgreedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BannedWorkerIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ClientProposedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConstructionSpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("ConstructionType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("LastActionBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RequestedStartTime")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WorkerProposedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("placementPhotos")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConstructionSpecificationId")
                        .IsUnique();

                    b.HasIndex("WorkerId");

                    b.ToTable("ConstructionOrders");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Material.MaterialOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaterialPriceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceGross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MaterialPriceId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("MaterialOrders");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.OrderAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConstructionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialOrderId")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ConstructionOrderId")
                        .IsUnique()
                        .HasFilter("[ConstructionOrderId] IS NOT NULL");

                    b.HasIndex("MaterialOrderId")
                        .IsUnique()
                        .HasFilter("[MaterialOrderId] IS NOT NULL");

                    b.ToTable("OrderAddress");
                });

            modelBuilder.Entity("Backend.Data.Models.Suppliers.MaterialPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MaterialCategory")
                        .HasColumnType("int");

                    b.Property<string>("MaterialPriceType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SupplierId");

                    b.ToTable("MaterialPrices", (string)null);

                    b.HasDiscriminator<string>("MaterialPriceType").HasValue("MaterialPrice");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Backend.Data.Models.Suppliers.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AddressId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("ID");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Dimensions.Balcony.BalconySpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RailingMaterial")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Width")
                                .HasColumnName("BalconySpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Dimensions.Doors.DoorsSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("DoorsSpecification_Height");

                            t.Property("Material")
                                .HasColumnName("DoorsSpecification_Material");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Dimensions.Facade.FacadeSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("FinishMaterial")
                        .HasColumnType("int");

                    b.Property<int>("InsulationType")
                        .HasColumnType("int");

                    b.Property<decimal>("SurfaceArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Dimensions.Floor.FlooringSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Area")
                                .HasColumnName("FlooringSpecification_Area");

                            t.Property("Material")
                                .HasColumnName("FlooringSpecification_Material");
                        });

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Dimensions.InsulationOfAtticSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Area")
                                .HasColumnName("InsulationOfAtticSpecification_Area");

                            t.Property("Material")
                                .HasColumnName("InsulationOfAtticSpecification_Material");
                        });

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Ceiling.CeilingSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Area")
                                .HasColumnName("CeilingSpecification_Area");

                            t.Property("Material")
                                .HasColumnName("CeilingSpecification_Material");
                        });

                    b.HasDiscriminator().HasValue(17);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Ceiling.SuspendedCeilingSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Chimney.ChimneySpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(13);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Foundation.FoundationSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Depth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Length")
                                .HasColumnName("FoundationSpecification_Length");

                            t.Property("Width")
                                .HasColumnName("FoundationSpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Painting.PaintingSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("NumberOfCoats")
                        .HasColumnType("int");

                    b.Property<int>("PaintType")
                        .HasColumnType("int");

                    b.Property<decimal>("WallSurfaceArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Plastering.PlasteringSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("PlasterType")
                        .HasColumnType("int");

                    b.Property<decimal>("WallSurfaceArea")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("WallSurfaceArea")
                                .HasColumnName("PlasteringSpecification_WallSurfaceArea");
                        });

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Roof.RoofSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("Pitch")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Area")
                                .HasColumnName("RoofSpecification_Area");

                            t.Property("Material")
                                .HasColumnName("RoofSpecification_Material");
                        });

                    b.HasDiscriminator().HasValue(16);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.ShellOpen.ShellOpenSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int?>("CellingID")
                        .HasColumnType("int");

                    b.Property<int?>("ChimneyID")
                        .HasColumnType("int");

                    b.Property<int?>("FoundationSpecificationID")
                        .HasColumnType("int");

                    b.Property<string>("ImagesUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoadBearingWallMaterialID")
                        .HasColumnType("int");

                    b.Property<int?>("PartitionWallID")
                        .HasColumnType("int");

                    b.Property<int?>("RoofID")
                        .HasColumnType("int");

                    b.Property<int?>("VentilationID")
                        .HasColumnType("int");

                    b.HasIndex("CellingID");

                    b.HasIndex("ChimneyID");

                    b.HasIndex("FoundationSpecificationID");

                    b.HasIndex("LoadBearingWallMaterialID");

                    b.HasIndex("PartitionWallID");

                    b.HasIndex("RoofID");

                    b.HasIndex("VentilationID");

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Stairs.StaircaseSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSteps")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("StaircaseSpecification_Height");

                            t.Property("Material")
                                .HasColumnName("StaircaseSpecification_Material");

                            t.Property("Width")
                                .HasColumnName("StaircaseSpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Ventilation.VentilationSystemSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Count")
                                .HasColumnName("VentilationSystemSpecification_Count");
                        });

                    b.HasDiscriminator().HasValue(15);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Walls.LoadBearingWallSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("LoadBearingWallSpecification_Height");

                            t.Property("Material")
                                .HasColumnName("LoadBearingWallSpecification_Material");

                            t.Property("Thickness")
                                .HasColumnName("LoadBearingWallSpecification_Thickness");

                            t.Property("Width")
                                .HasColumnName("LoadBearingWallSpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(14);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Walls.PartitionWallSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal?>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("PartitionWallSpecification_Height");

                            t.Property("Material")
                                .HasColumnName("PartitionWallSpecification_Material");

                            t.Property("Thickness")
                                .HasColumnName("PartitionWallSpecification_Thickness");

                            t.Property("Width")
                                .HasColumnName("PartitionWallSpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.Windows.WindowsSpecification", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("ConstructionSpecifications", t =>
                        {
                            t.Property("Amount")
                                .HasColumnName("WindowsSpecification_Amount");

                            t.Property("Height")
                                .HasColumnName("WindowsSpecification_Height");

                            t.Property("Material")
                                .HasColumnName("WindowsSpecification_Material");

                            t.Property("Width")
                                .HasColumnName("WindowsSpecification_Width");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Balcony.BalconyMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("Height")
                                .HasColumnName("BalconyMaterialPrice_Height");
                        });

                    b.HasDiscriminator().HasValue("Balcony");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Celling.SuspendedCeilingMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("MaxHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("SuspendedCeilingMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("SuspendedCeiling");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Doors.DoorsMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerDoor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Doors");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Facade.FacadeMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerSquareMeterFinish")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("FacadeMaterialPrice_PricePerSquareMeter");

                            t.Property("Thickness")
                                .HasColumnName("FacadeMaterialPrice_Thickness");
                        });

                    b.HasDiscriminator().HasValue("Facade");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Floor.FlooringMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("FlooringMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("Flooring");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Insulation.InsulationOfAtticMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Thickness")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("InsulationOfAtticMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("InsulationOfAttic");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Painting.PaintingMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("CoveragePerLiter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerLiter")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Painting");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Plastering.PlasteringMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("PlasteringMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("Plastering");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.CeilingMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("CeilingMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("Ceiling");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.ChimneyMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerCubicMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerCubicMeter")
                                .HasColumnName("ChimneyMaterialPrice_PricePerCubicMeter");
                        });

                    b.HasDiscriminator().HasValue("Chimney");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.FoundationMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerCubicMeter")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Foundation");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.LoadBearingWallMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("LoadBearingWallMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("LoadBearingWall");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.PartitionWallMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("PartitionWallMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("PartitionWall");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.RoofMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("MaterialPrices", t =>
                        {
                            t.Property("PricePerSquareMeter")
                                .HasColumnName("RoofMaterialPrice_PricePerSquareMeter");
                        });

                    b.HasDiscriminator().HasValue("Roof");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.ShellOpen.VentilationSystemMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("VentilationSystem");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Stairs.StaircaseMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerStep")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("StandardStepHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("StandardStepWidth")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Staircase");
                });

            modelBuilder.Entity("Backend.Data.Models.MaterialPrices.Windows.WindowsMaterialPrice", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Suppliers.MaterialPrice");

                    b.Property<decimal>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StandardHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StandardWidth")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Windows");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Client", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Users.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Worker", b =>
                {
                    b.HasBaseType("Backend.Data.Models.Users.User");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("Backend.Data.Models.Notifications.ConstructionOrderNotification", b =>
                {
                    b.HasOne("Backend.Data.Models.Users.Client", "Client")
                        .WithMany("ConstructionOrderNotifications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Data.Models.Orders.Construction.ConstructionOrder", null)
                        .WithMany("Notifications")
                        .HasForeignKey("ConstructionOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Users.Worker", "Worker")
                        .WithMany("ConstructionOrderNotifications")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Backend.Data.Models.Notifications.MaterialNotification", b =>
                {
                    b.HasOne("Backend.Data.Models.Suppliers.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Construction.ConstructionOrder", b =>
                {
                    b.HasOne("Backend.Data.Models.Users.Client", "Client")
                        .WithMany("ConstructionOrders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.ConstructionSpecification", "ConstructionSpecification")
                        .WithOne()
                        .HasForeignKey("Backend.Data.Models.Orders.Construction.ConstructionOrder", "ConstructionSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Users.Worker", "Worker")
                        .WithMany("AssignedOrders")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("ConstructionSpecification");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Material.MaterialOrder", b =>
                {
                    b.HasOne("Backend.Data.Models.Suppliers.MaterialPrice", "MaterialPrice")
                        .WithMany()
                        .HasForeignKey("MaterialPriceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Data.Models.Suppliers.Supplier", "Supplier")
                        .WithMany("MaterialOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Data.Models.Users.User", "User")
                        .WithMany("MaterialOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialPrice");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.OrderAddress", b =>
                {
                    b.HasOne("Backend.Data.Models.Orders.Construction.ConstructionOrder", "ConstructionOrder")
                        .WithOne("Address")
                        .HasForeignKey("Backend.Data.Models.Orders.OrderAddress", "ConstructionOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Data.Models.Orders.Material.MaterialOrder", "MaterialOrder")
                        .WithOne("Address")
                        .HasForeignKey("Backend.Data.Models.Orders.OrderAddress", "MaterialOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ConstructionOrder");

                    b.Navigation("MaterialOrder");
                });

            modelBuilder.Entity("Backend.Data.Models.Suppliers.MaterialPrice", b =>
                {
                    b.HasOne("Backend.Data.Models.Suppliers.Supplier", "Supplier")
                        .WithMany("MaterialPrices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Backend.Data.Models.Suppliers.Supplier", b =>
                {
                    b.HasOne("Backend.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.User", b =>
                {
                    b.HasOne("Backend.Data.Models.Common.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Backend.Data.Models.Users.User", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Backend.Data.Models.Credidentials.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<int>("UserID")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PasswordHash")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserID");
                        });

                    b.Navigation("Address");

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Backend.Data.Models.Constructions.Specyfication.ShellOpen.ShellOpenSpecification", b =>
                {
                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Ceiling.CeilingSpecification", "Celling")
                        .WithMany()
                        .HasForeignKey("CellingID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Chimney.ChimneySpecification", "Chimney")
                        .WithMany()
                        .HasForeignKey("ChimneyID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Foundation.FoundationSpecification", "FoundationSpecification")
                        .WithMany()
                        .HasForeignKey("FoundationSpecificationID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Walls.LoadBearingWallSpecification", "LoadBearingWallMaterial")
                        .WithMany()
                        .HasForeignKey("LoadBearingWallMaterialID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Walls.PartitionWallSpecification", "PartitionWall")
                        .WithMany()
                        .HasForeignKey("PartitionWallID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Roof.RoofSpecification", "Roof")
                        .WithMany()
                        .HasForeignKey("RoofID");

                    b.HasOne("Backend.Data.Models.Constructions.Specyfication.Ventilation.VentilationSystemSpecification", "Ventilation")
                        .WithMany()
                        .HasForeignKey("VentilationID");

                    b.Navigation("Celling");

                    b.Navigation("Chimney");

                    b.Navigation("FoundationSpecification");

                    b.Navigation("LoadBearingWallMaterial");

                    b.Navigation("PartitionWall");

                    b.Navigation("Roof");

                    b.Navigation("Ventilation");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Client", b =>
                {
                    b.OwnsOne("Backend.Data.Models.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<int>("ClientID")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClientID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("ClientID");
                        });

                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Worker", b =>
                {
                    b.OwnsOne("Backend.Data.Models.Common.ContactDetails", "ContactDetails", b1 =>
                        {
                            b1.Property<int>("WorkerID")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WorkerID");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("WorkerID");
                        });

                    b.Navigation("ContactDetails");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Construction.ConstructionOrder", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Backend.Data.Models.Orders.Material.MaterialOrder", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Backend.Data.Models.Suppliers.Supplier", b =>
                {
                    b.Navigation("MaterialOrders");

                    b.Navigation("MaterialPrices");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.User", b =>
                {
                    b.Navigation("MaterialOrders");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Client", b =>
                {
                    b.Navigation("ConstructionOrderNotifications");

                    b.Navigation("ConstructionOrders");
                });

            modelBuilder.Entity("Backend.Data.Models.Users.Worker", b =>
                {
                    b.Navigation("AssignedOrders");

                    b.Navigation("ConstructionOrderNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
